// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMRU.Persistence.Context;

#nullable disable

namespace PMRU.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240115151017_DefaultUserRolesAdded")]
    partial class DefaultUserRolesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("faad6812-0f8e-4342-8738-6dcd5e8ecc09"),
                            RoleId = new Guid("01b33042-952a-4636-8d15-682447de311a")
                        },
                        new
                        {
                            UserId = new Guid("79a21042-ac37-43dc-b246-e1a2c9645afb"),
                            RoleId = new Guid("b56d0892-1daa-4b5d-a6e0-381a250daea1")
                        },
                        new
                        {
                            UserId = new Guid("a76eb5c4-eebf-47ec-a274-ca7971bfa4e8"),
                            RoleId = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("AppointmentHour")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.HasIndex("DoctorID", "AppointmentDate", "AppointmentHour")
                        .IsUnique();

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateOnly(2023, 11, 12),
                            AppointmentHour = new TimeOnly(12, 30, 0),
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(378),
                            Description = "Regular Checkup",
                            DoctorID = 1,
                            EmployeeID = 1,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateOnly(2023, 12, 13),
                            AppointmentHour = new TimeOnly(13, 45, 0),
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(402),
                            Description = "Regular Checkup",
                            DoctorID = 2,
                            EmployeeID = 2,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorID");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(2704),
                            Day = 1,
                            DoctorID = 1,
                            EndTime = new TimeSpan(0, 8, 20, 0, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(2717),
                            Day = 2,
                            DoctorID = 2,
                            EndTime = new TimeSpan(0, 8, 20, 0, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentDescription = "Güvenlik",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            DepartmentDescription = "Üretim",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            DepartmentDescription = "Finans",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            DepartmentDescription = "İnsan Kaynakları",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            DepartmentDescription = "Satış Pazarlama",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            DepartmentDescription = "IT",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            DepartmentDescription = "Sağlık",
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "aylin.gunes@email.com",
                            IdentityNumber = "12345678901",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Aylin",
                            Password = "Password",
                            Phone = "5556123456",
                            RegistrationNumber = "102",
                            Surname = "Güneş"
                        },
                        new
                        {
                            Id = 2,
                            Email = "eren.akcay@email.com",
                            IdentityNumber = "12345678923",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Eren",
                            Password = "Password",
                            Phone = "5556234567",
                            RegistrationNumber = "103",
                            Surname = "Akçay"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PositionID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7888),
                            DepartmentID = 4,
                            Email = "ahmet.yilmaz@email.com",
                            IdentityNumber = "5555123456",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Ahmet",
                            Phone = "(555) 512-3456",
                            PositionID = 4,
                            RegistrationNumber = "100",
                            Surname = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7891),
                            DepartmentID = 4,
                            Email = "ayse.kaya@email.com",
                            IdentityNumber = "5555234567",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Ayşe",
                            Phone = "(555) 523-4567",
                            PositionID = 3,
                            RegistrationNumber = "101",
                            Surname = "Kaya"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7897),
                            DepartmentID = 3,
                            Email = "mehmet.celik@email.com",
                            IdentityNumber = "5278149630",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Mehmet",
                            Phone = "(555) 534-5678",
                            PositionID = 5,
                            RegistrationNumber = "102",
                            Surname = "Çelik"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7903),
                            DepartmentID = 4,
                            Email = "fatma.arslan@email.com",
                            IdentityNumber = "5555456789",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 71,
                            Name = "Fatma",
                            Phone = "(555) 545-6789",
                            PositionID = 6,
                            RegistrationNumber = "103",
                            Surname = "Arslan"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7906),
                            DepartmentID = 2,
                            Email = "ali.demir@email.com",
                            IdentityNumber = "5555567890",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Ali",
                            Phone = "(555) 556-7890",
                            PositionID = 2,
                            RegistrationNumber = "104",
                            Surname = "Demir"
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7911),
                            DepartmentID = 5,
                            Email = "zeynep.yildiz@email.com",
                            IdentityNumber = "5555678901",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Zeynep",
                            Phone = "(555) 567-8901",
                            PositionID = 14,
                            RegistrationNumber = "105",
                            Surname = "Yıldız"
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7943),
                            DepartmentID = 2,
                            Email = "can.aksoy@email.com",
                            IdentityNumber = "5555789012",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Can",
                            Phone = "(555) 578-9012",
                            PositionID = 4,
                            RegistrationNumber = "106",
                            Surname = "Aksoy"
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7946),
                            DepartmentID = 6,
                            Email = "elif.ersoy@email.com",
                            IdentityNumber = "5555890123",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Elif",
                            Phone = "(555) 589-0123",
                            PositionID = 8,
                            RegistrationNumber = "107",
                            Surname = "Ersoy"
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7951),
                            DepartmentID = 4,
                            Email = "burak.taskin@email.com",
                            IdentityNumber = "5555901234",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Burak",
                            Phone = "(555) 590-1234",
                            PositionID = 7,
                            RegistrationNumber = "108",
                            Surname = "Taşkın"
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 15, 18, 10, 17, 145, DateTimeKind.Local).AddTicks(7956),
                            DepartmentID = 1,
                            Email = "deniz.akin@email.com",
                            IdentityNumber = "5556012345",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 71,
                            Name = "Deniz",
                            Phone = "(555) 601-2345",
                            PositionID = 2,
                            RegistrationNumber = "109",
                            Surname = "Akın"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.LocalAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("LocalAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "cem.yildirim@email.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Cem",
                            Password = "password123",
                            Phone = "5556456789",
                            Surname = "Yıldırım"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocationCenter")
                        .HasColumnType("bit");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = true,
                            LocationDescription = "Genel Müdürlük"
                        },
                        new
                        {
                            Id = 35,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "İzmir"
                        },
                        new
                        {
                            Id = 41,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "İzmit"
                        },
                        new
                        {
                            Id = 72,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "Batman"
                        },
                        new
                        {
                            Id = 71,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "Kırıkkale"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PositionDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Güvenlik Şefi"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Güvenlik Görevlisi"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Elektrik Mühendisi"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Makine Mühendisi"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Muhasebe Uzmanı"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Personel Uzmanı"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "İnsan Kaynakları Uzmanı"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Yazılım Geliştirici"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Test Uzmanı"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Finans Uzmanı"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Pazarlama Uzmanı"
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Doktor"
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Hemşire"
                        },
                        new
                        {
                            Id = 14,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Satış Temsilcisi"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01b33042-952a-4636-8d15-682447de311a"),
                            ConcurrencyStamp = "5f787b8d-4354-4e54-b3a7-81b6998e3005",
                            Name = "SystemAdmin",
                            NormalizedName = "SYSTEMADMIN"
                        },
                        new
                        {
                            Id = new Guid("b56d0892-1daa-4b5d-a6e0-381a250daea1"),
                            ConcurrencyStamp = "8effe541-cf2b-444f-b4ce-4ea29c18d3bd",
                            Name = "LocalAdmin",
                            NormalizedName = "LOCALADMIN"
                        },
                        new
                        {
                            Id = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746"),
                            ConcurrencyStamp = "c8de1c5f-61d9-4293-871e-3951d19fabdb",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.SystemAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("SystemAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "elif.ersoy@email.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Elif",
                            Password = "adminpassword",
                            Phone = "5555890123",
                            Surname = "Ersoy"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("faad6812-0f8e-4342-8738-6dcd5e8ecc09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e03a755-edfc-4f25-a2a5-b51e7688c5c9",
                            Email = "systemadmin@localhost.com",
                            EmailConfirmed = false,
                            FullName = "System Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEMADMIN@LOCALHOST.COM",
                            NormalizedUserName = "SYSTEMADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELXMsyL4upAReyPLzJa9W8CuW8MyRi6XCTTuT+nfQzXgkb+CxeoUgxNJ6pEPKKPTuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "935cdeeb-0091-4155-b89d-67c6c967c3eb",
                            TwoFactorEnabled = false,
                            UserName = "systemadmin@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("79a21042-ac37-43dc-b246-e1a2c9645afb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d45d3f7-9189-4346-a514-58088823dd1c",
                            Email = "localadmin@localhost.com",
                            EmailConfirmed = false,
                            FullName = "Local Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOCALADMIN@LOCALHOST.COM",
                            NormalizedUserName = "LOCALADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3DfpK9fhu8DIfLbUWEuAswD5KuQEIkYp9JqhVIEjDm2mOMZqFY+w4c5DqeFOg7BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c75faad5-1ac2-4861-ae68-7695b7216e87",
                            TwoFactorEnabled = false,
                            UserName = "localadmin@localhost.com"
                        },
                        new
                        {
                            Id = new Guid("a76eb5c4-eebf-47ec-a274-ca7971bfa4e8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b560da33-1be3-4855-8da6-dcf00e05afcb",
                            Email = "doctor@localhost.com",
                            EmailConfirmed = false,
                            FullName = "Doctor",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@LOCALHOST.COM",
                            NormalizedUserName = "DOCTOR@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZyTG2bizNnMYUx3Ip39pAUJ+J6TPQKbIZ7J4fufdP81LepHew29pEBEN/tfBaBcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1047d53d-b781-4016-8492-dd02aac7391e",
                            TwoFactorEnabled = false,
                            UserName = "doctor@localhost.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.Employee", "Employee")
                        .WithOne("Appointment")
                        .HasForeignKey("PMRU.Domain.Entities.Appointment", "EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Availability", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Availabilities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Employee", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Appointment");
                });
#pragma warning restore 612, 618
        }
    }
}
