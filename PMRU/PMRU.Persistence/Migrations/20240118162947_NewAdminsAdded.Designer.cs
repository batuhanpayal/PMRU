// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMRU.Persistence.Context;

#nullable disable

namespace PMRU.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240118162947_NewAdminsAdded")]
    partial class NewAdminsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("faad6812-0f8e-4342-8738-6dcd5e8ecc09"),
                            RoleId = new Guid("01b33042-952a-4636-8d15-682447de311a")
                        },
                        new
                        {
                            UserId = new Guid("a76eb5c4-eebf-47ec-a274-ca7971bfa4e8"),
                            RoleId = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746")
                        },
                        new
                        {
                            UserId = new Guid("a3b9e2f7-5c1d-4a88-9f3b-7e6c4d2a1b11"),
                            RoleId = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746")
                        },
                        new
                        {
                            UserId = new Guid("e2f8d174-4b7a-4c91-b9f2-8dc3a1c45b68"),
                            RoleId = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746")
                        },
                        new
                        {
                            UserId = new Guid("0e7b95a1-9b14-4c87-af3d-1d2f6b8aefc3"),
                            RoleId = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746")
                        },
                        new
                        {
                            UserId = new Guid("79a21042-ac37-43dc-b246-e1a2c9645afb"),
                            RoleId = new Guid("b56d0892-1daa-4b5d-a6e0-381a250daea1")
                        },
                        new
                        {
                            UserId = new Guid("faad6812-0f8e-4342-aabb-6dcd5e8ecc09"),
                            RoleId = new Guid("b56d0892-1daa-4b5d-a6e0-381a250daea1")
                        },
                        new
                        {
                            UserId = new Guid("3a7f9b68-21d5-4f8c-b2a7-9c0e1f5d2a91"),
                            RoleId = new Guid("b56d0892-1daa-4b5d-a6e0-381a250daea1")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("AppointmentEndHour")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("AppointmentStartHour")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorID");

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateOnly(2024, 1, 1),
                            AppointmentEndHour = new TimeOnly(8, 20, 0),
                            AppointmentStartHour = new TimeOnly(8, 0, 0),
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 724, DateTimeKind.Local).AddTicks(7096),
                            Description = "Regular Checkup",
                            DoctorID = 1,
                            EmployeeID = 1,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateOnly(2024, 1, 1),
                            AppointmentEndHour = new TimeOnly(8, 20, 0),
                            AppointmentStartHour = new TimeOnly(8, 0, 0),
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 724, DateTimeKind.Local).AddTicks(7120),
                            Description = "Regular Checkup",
                            DoctorID = 2,
                            EmployeeID = 2,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorID");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 725, DateTimeKind.Local).AddTicks(2496),
                            Date = new DateOnly(2024, 1, 2),
                            DoctorID = 1,
                            EndTime = new TimeOnly(8, 20, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 725, DateTimeKind.Local).AddTicks(2505),
                            Date = new DateOnly(2024, 1, 2),
                            DoctorID = 1,
                            EndTime = new TimeOnly(8, 40, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeOnly(8, 20, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 725, DateTimeKind.Local).AddTicks(2506),
                            Date = new DateOnly(2024, 1, 2),
                            DoctorID = 1,
                            EndTime = new TimeOnly(9, 0, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeOnly(8, 40, 0)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 725, DateTimeKind.Local).AddTicks(2508),
                            Date = new DateOnly(2024, 1, 2),
                            DoctorID = 2,
                            EndTime = new TimeOnly(8, 20, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 725, DateTimeKind.Local).AddTicks(2509),
                            Date = new DateOnly(2024, 1, 2),
                            DoctorID = 2,
                            EndTime = new TimeOnly(8, 40, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeOnly(8, 20, 0)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 725, DateTimeKind.Local).AddTicks(2511),
                            Date = new DateOnly(2024, 1, 2),
                            DoctorID = 2,
                            EndTime = new TimeOnly(9, 0, 0),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new TimeOnly(8, 40, 0)
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentDescription = "Güvenlik",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            DepartmentDescription = "Üretim",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            DepartmentDescription = "Finans",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            DepartmentDescription = "İnsan Kaynakları",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            DepartmentDescription = "Satış Pazarlama",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            DepartmentDescription = "IT",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            DepartmentDescription = "Sağlık",
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "aylin.gunes@email.com",
                            IdentityNumber = "12345678901",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Aylin",
                            Password = "Password",
                            Phone = "5556123456",
                            RegistrationNumber = "110",
                            Surname = "Güneş"
                        },
                        new
                        {
                            Id = 2,
                            Email = "eren.akcay@email.com",
                            IdentityNumber = "12345678923",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Eren",
                            Password = "Password",
                            Phone = "5556234567",
                            RegistrationNumber = "111",
                            Surname = "Akçay"
                        },
                        new
                        {
                            Id = 3,
                            Email = "gulay.kaya@email.com",
                            IdentityNumber = "12343458923",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Gülay",
                            Password = "Password",
                            Phone = "5556345678",
                            RegistrationNumber = "112",
                            Surname = "Kaya"
                        },
                        new
                        {
                            Id = 4,
                            Email = "gulsum.aydin@email.com",
                            IdentityNumber = "12343458205",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Gülsüm",
                            Password = "Password",
                            Phone = "5556678901",
                            RegistrationNumber = "116",
                            Surname = "Aydın"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PositionID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7347),
                            DepartmentID = 4,
                            Email = "ahmet.yilmaz@email.com",
                            IdentityNumber = "5555123456",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Ahmet",
                            Phone = "(555) 512-3456",
                            PositionID = 4,
                            RegistrationNumber = "100",
                            Surname = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7351),
                            DepartmentID = 4,
                            Email = "ayse.kaya@email.com",
                            IdentityNumber = "5555234567",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Ayşe",
                            Phone = "(555) 523-4567",
                            PositionID = 3,
                            RegistrationNumber = "101",
                            Surname = "Kaya"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7355),
                            DepartmentID = 3,
                            Email = "mehmet.celik@email.com",
                            IdentityNumber = "5278149630",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Mehmet",
                            Phone = "(555) 534-5678",
                            PositionID = 5,
                            RegistrationNumber = "102",
                            Surname = "Çelik"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7357),
                            DepartmentID = 4,
                            Email = "fatma.arslan@email.com",
                            IdentityNumber = "5555456789",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 71,
                            Name = "Fatma",
                            Phone = "(555) 545-6789",
                            PositionID = 6,
                            RegistrationNumber = "103",
                            Surname = "Arslan"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7360),
                            DepartmentID = 2,
                            Email = "ali.demir@email.com",
                            IdentityNumber = "5555567890",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Ali",
                            Phone = "(555) 556-7890",
                            PositionID = 2,
                            RegistrationNumber = "104",
                            Surname = "Demir"
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7363),
                            DepartmentID = 5,
                            Email = "zeynep.yildiz@email.com",
                            IdentityNumber = "5555678901",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Zeynep",
                            Phone = "(555) 567-8901",
                            PositionID = 14,
                            RegistrationNumber = "105",
                            Surname = "Yıldız"
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7400),
                            DepartmentID = 2,
                            Email = "can.aksoy@email.com",
                            IdentityNumber = "5555789012",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Can",
                            Phone = "(555) 578-9012",
                            PositionID = 4,
                            RegistrationNumber = "106",
                            Surname = "Aksoy"
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7403),
                            DepartmentID = 6,
                            Email = "elif.ersoy@email.com",
                            IdentityNumber = "5555890123",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Elif",
                            Phone = "(555) 589-0123",
                            PositionID = 8,
                            RegistrationNumber = "107",
                            Surname = "Ersoy"
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7406),
                            DepartmentID = 4,
                            Email = "burak.taskin@email.com",
                            IdentityNumber = "5555901234",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Burak",
                            Phone = "(555) 590-1234",
                            PositionID = 7,
                            RegistrationNumber = "108",
                            Surname = "Taşkın"
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7414),
                            DepartmentID = 1,
                            Email = "deniz.akin@email.com",
                            IdentityNumber = "5556012345",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 71,
                            Name = "Deniz",
                            Phone = "(555) 601-2345",
                            PositionID = 2,
                            RegistrationNumber = "109",
                            Surname = "Akın"
                        },
                        new
                        {
                            Id = 11,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7422),
                            DepartmentID = 7,
                            Email = "aylin.gunes@email.com",
                            IdentityNumber = "5642597451",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Aylin",
                            Phone = "(555) 612-3456",
                            PositionID = 12,
                            RegistrationNumber = "110",
                            Surname = "Güneş"
                        },
                        new
                        {
                            Id = 12,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7436),
                            DepartmentID = 7,
                            Email = "eren.akcay@email.com",
                            IdentityNumber = "5642517451",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Eren",
                            Phone = "(555) 623-4567",
                            PositionID = 12,
                            RegistrationNumber = "111",
                            Surname = "Akçay"
                        },
                        new
                        {
                            Id = 13,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7439),
                            DepartmentID = 7,
                            Email = "gulay.kaya@email.com",
                            IdentityNumber = "3462517451",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Gülay",
                            Phone = "(555) 634-5678",
                            PositionID = 12,
                            RegistrationNumber = "112",
                            Surname = "Kaya"
                        },
                        new
                        {
                            Id = 14,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7442),
                            DepartmentID = 7,
                            Email = "cem.yildirim@email.com",
                            IdentityNumber = "3434517451",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Cem",
                            Phone = "(555) 645-6789",
                            PositionID = 13,
                            RegistrationNumber = "113",
                            Surname = "Yıldırım"
                        },
                        new
                        {
                            Id = 15,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7444),
                            DepartmentID = 7,
                            Email = "dilara.cetin@email.com",
                            IdentityNumber = "3434546751",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 72,
                            Name = "Dilara",
                            Phone = "(555) 656-7890",
                            PositionID = 13,
                            RegistrationNumber = "114",
                            Surname = "Çetin"
                        },
                        new
                        {
                            Id = 16,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7448),
                            DepartmentID = 7,
                            Email = "mert.saglam@email.com",
                            IdentityNumber = "3432209751",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Mert",
                            Phone = "(535) 896-4526",
                            PositionID = 13,
                            RegistrationNumber = "115",
                            Surname = "Sağlam"
                        },
                        new
                        {
                            Id = 17,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7450),
                            DepartmentID = 7,
                            Email = "gulsum.aydin@email.com",
                            IdentityNumber = "3432906751",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Gülsüm",
                            Phone = "(555) 667-8901",
                            PositionID = 12,
                            RegistrationNumber = "116",
                            Surname = "Aydın"
                        },
                        new
                        {
                            Id = 18,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7453),
                            DepartmentID = 7,
                            Email = "emre.yaman@email.com",
                            IdentityNumber = "3850906751",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Emre",
                            Phone = "(555) 678-9012",
                            PositionID = 13,
                            RegistrationNumber = "117",
                            Surname = "Yaman"
                        },
                        new
                        {
                            Id = 19,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7456),
                            DepartmentID = 5,
                            Email = "selin.erdogan@email.com",
                            IdentityNumber = "3850915851",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 41,
                            Name = "Selin",
                            Phone = "(555) 689-0123",
                            PositionID = 11,
                            RegistrationNumber = "118",
                            Surname = "Erdoğan"
                        },
                        new
                        {
                            Id = 20,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7458),
                            DepartmentID = 3,
                            Email = "onur.akbas@email.com",
                            IdentityNumber = "3850926751",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 35,
                            Name = "Onur",
                            Phone = "(555) 690-1234",
                            PositionID = 10,
                            RegistrationNumber = "119",
                            Surname = "Akbaş"
                        },
                        new
                        {
                            Id = 21,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 1, 18, 19, 29, 45, 726, DateTimeKind.Local).AddTicks(7461),
                            DepartmentID = 6,
                            Email = "melis.yilmaz@email.com",
                            IdentityNumber = "3880226751",
                            IsActive = true,
                            IsDeleted = false,
                            LocationID = 34,
                            Name = "Melis",
                            Phone = "(555) 701-2345",
                            PositionID = 9,
                            RegistrationNumber = "120",
                            Surname = "Yılmaz"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocationCenter")
                        .HasColumnType("bit");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 34,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = true,
                            LocationDescription = "Genel Müdürlük"
                        },
                        new
                        {
                            Id = 35,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "İzmir"
                        },
                        new
                        {
                            Id = 41,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "İzmit"
                        },
                        new
                        {
                            Id = 72,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "Batman"
                        },
                        new
                        {
                            Id = 71,
                            IsActive = true,
                            IsDeleted = false,
                            IsLocationCenter = false,
                            LocationDescription = "Kırıkkale"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PositionDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Güvenlik Şefi"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Güvenlik Görevlisi"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Elektrik Mühendisi"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Makine Mühendisi"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Muhasebe Uzmanı"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Personel Uzmanı"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "İnsan Kaynakları Uzmanı"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Yazılım Geliştirici"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Test Uzmanı"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Finans Uzmanı"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Pazarlama Uzmanı"
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Doktor"
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Hemşire"
                        },
                        new
                        {
                            Id = 14,
                            IsActive = true,
                            IsDeleted = false,
                            PositionDescription = "Satış Temsilcisi"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01b33042-952a-4636-8d15-682447de311a"),
                            ConcurrencyStamp = "44952f0b-d8f2-42ad-b1ca-fe5d5d8377c5",
                            Name = "SystemAdmin",
                            NormalizedName = "SYSTEMADMIN"
                        },
                        new
                        {
                            Id = new Guid("b56d0892-1daa-4b5d-a6e0-381a250daea1"),
                            ConcurrencyStamp = "62256794-887b-4e60-9096-d68b93270bcb",
                            Name = "LocalAdmin",
                            NormalizedName = "LOCALADMIN"
                        },
                        new
                        {
                            Id = new Guid("e3a11d19-3f92-463a-a80d-38228fa18746"),
                            ConcurrencyStamp = "97e10a8e-6724-4c92-81a1-b12737fdf95c",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("PMRU.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("faad6812-0f8e-4342-8738-6dcd5e8ecc09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32ada948-5e3a-49fd-b412-2de429b8554f",
                            Email = "elif.ersoy@email.com",
                            EmailConfirmed = false,
                            FullName = "Elif Ersoy",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.ERSOY@EMAIL.COM",
                            NormalizedUserName = "ELIF.ERSOY@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBQorwkUiis6T4jB0x7XCadqo2vzstOm/7xe0pTFYy37wu7WhKWYIv4OSbucGzFayg==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "107",
                            SecurityStamp = "4233b8f8-b68a-4ead-985c-71d993beac52",
                            TwoFactorEnabled = false,
                            UserName = "elif.ersoy@email.com"
                        },
                        new
                        {
                            Id = new Guid("a76eb5c4-eebf-47ec-a274-ca7971bfa4e8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a699c491-1bb9-4da1-9e04-640a1effa8fd",
                            Email = "aylin.gunes@email.com",
                            EmailConfirmed = false,
                            FullName = "Aylin Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLIN.GUNES@EMAIL.COM",
                            NormalizedUserName = "AYLIN.GUNES@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMI45Ew1KiZyZy1wjRHKZQNivI6kxg05MKbZHtunC+8fF9QKiJwXsWySE/otzKO5xQ==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "110",
                            SecurityStamp = "6c69a3f7-4576-447f-b33f-57e9f4ff4f3f",
                            TwoFactorEnabled = false,
                            UserName = "aylin.gunes@email.com"
                        },
                        new
                        {
                            Id = new Guid("a3b9e2f7-5c1d-4a88-9f3b-7e6c4d2a1b11"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c46c30ae-318c-4d41-9ede-3e4d33cdef2b",
                            Email = "eren.akcay@email.com",
                            EmailConfirmed = false,
                            FullName = "Eren Akçay",
                            LockoutEnabled = false,
                            NormalizedEmail = "EREN.AKCAY@EMAIL.COM",
                            NormalizedUserName = "EREN.AKCAY@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKR5jjkz8eS/dPaIp2Ys/TVdUTDgUD4ASzVGZdeIEgDLLL3+NMg24bBt+ERLAKBb7Q==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "111",
                            SecurityStamp = "56583fce-0dad-48f6-90fd-38f425f8ad13",
                            TwoFactorEnabled = false,
                            UserName = "eren.akcay@email.com"
                        },
                        new
                        {
                            Id = new Guid("e2f8d174-4b7a-4c91-b9f2-8dc3a1c45b68"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c39245f5-2006-4647-9a84-57a3f2412c1b",
                            Email = "gulay.kaya@email.com",
                            EmailConfirmed = false,
                            FullName = "Gülay Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "GULAY.KAYA@EMAIL.COM",
                            NormalizedUserName = "GULAY.KAYA@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECaMJAKaS77/drGFOwr95LTtrqacX6tKzsBkzh+JB6kerWzEZgQNBmv2CQiBpsOpbw==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "112",
                            SecurityStamp = "4c816c31-b0a3-473e-a111-b3181eddea6c",
                            TwoFactorEnabled = false,
                            UserName = "gulay.kaya@email.com"
                        },
                        new
                        {
                            Id = new Guid("0e7b95a1-9b14-4c87-af3d-1d2f6b8aefc3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34db62f3-4cf3-45bd-bb6e-77280b1cc7fd",
                            Email = "gulsum.aydin@email.com",
                            EmailConfirmed = false,
                            FullName = "Gülsüm Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GULSUM.AYDIN@EMAIL.COM",
                            NormalizedUserName = "GULSUM.AYDIN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHX9JwpT8obTBW9/ErHy/OqTbM95+iq3H1ZUUPFWQuiyt2HZ11uSsDjw8Cf/kFxsBA==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "116",
                            SecurityStamp = "709162aa-b49a-485e-a1e0-11253b11960a",
                            TwoFactorEnabled = false,
                            UserName = "gulsum.aydin@email.com"
                        },
                        new
                        {
                            Id = new Guid("79a21042-ac37-43dc-b246-e1a2c9645afb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4ea0bc9-47b2-4fc1-a1b9-2fd0351997a4",
                            Email = "cem.yildirim@email.com",
                            EmailConfirmed = false,
                            FullName = "Cem Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILDIRIM@EMAIL.COM",
                            NormalizedUserName = "CEM.YILDIRIM@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxRw7ELs3jwPGxYlbYpPzUJ6TJt5CuD9JDdWYNymZnz82kie7WoY6O08FZouLioLw==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "113",
                            SecurityStamp = "fbd9004a-778f-4fb1-a9b7-6d391c91cc3c",
                            TwoFactorEnabled = false,
                            UserName = "cem.yildirim@email.com"
                        },
                        new
                        {
                            Id = new Guid("faad6812-0f8e-4342-aabb-6dcd5e8ecc09"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55711f4d-866c-4637-8b40-79a5a5d2461a",
                            Email = "dilara.cetin@email.com",
                            EmailConfirmed = false,
                            FullName = "Dilara Çetin",
                            LockoutEnabled = false,
                            NormalizedEmail = "DILARA.CETIN@EMAIL.COM",
                            NormalizedUserName = "DILARA.CETIN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIT/IS7/pz3NZ6guY/O3UvJC7EbyHdsGZ906x/VX8gtqD/R35gcfxqyyCLeC4zKhSA==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "114",
                            SecurityStamp = "fc874370-b427-46d1-8322-0ce28f035e7a",
                            TwoFactorEnabled = false,
                            UserName = "dilara.cetin@email.com"
                        },
                        new
                        {
                            Id = new Guid("a2b4f813-72c9-4a6e-9d7b-1f8c3d2e5a0f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf44bf9d-8ef2-409d-9746-2cbf669f75ba",
                            Email = "mert.saglam@email.com",
                            EmailConfirmed = false,
                            FullName = "Mert Sağlam",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERT.SAGLAM@EMAIL.COM",
                            NormalizedUserName = "MERT.SAGLAM@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFmfMhNgRek1osyNJtGyYjPB2tRAxn64sFnGgkC7SSgv55sL9fpYjuQfIG36Y9RB5Q==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "115",
                            SecurityStamp = "fd039f34-a09b-4e2c-a5d5-071aa2b7a509",
                            TwoFactorEnabled = false,
                            UserName = "mert.saglam@email.com"
                        },
                        new
                        {
                            Id = new Guid("3a7f9b68-21d5-4f8c-b2a7-9c0e1f5d2a91"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0097b68b-0dcb-42ce-a606-a8ff13fd1b3d",
                            Email = "emre.yaman@email.com",
                            EmailConfirmed = false,
                            FullName = "Emre Yaman",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE.YAMAN@EMAIL.COM",
                            NormalizedUserName = "EMRE.YAMAN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8sWsGH/H8h9caYgpueWw/A19r31CEMCSQh1A7YGByQ95lel8f1uwZ80dTesJGVAg==",
                            PhoneNumberConfirmed = false,
                            RegistrationNumber = "117",
                            SecurityStamp = "780450fa-f292-41c5-8d74-33f356fee6e2",
                            TwoFactorEnabled = false,
                            UserName = "emre.yaman@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.Employee", "Employee")
                        .WithOne("Appointment")
                        .HasForeignKey("PMRU.Domain.Entities.Appointment", "EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Availability", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Availabilities")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Employee", b =>
                {
                    b.HasOne("PMRU.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PMRU.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("PMRU.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Appointment");
                });
#pragma warning restore 612, 618
        }
    }
}
